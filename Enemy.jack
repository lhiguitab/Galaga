class Enemy {
    field int x, y;          // Posición de la nave enemiga
    field int width, height; // Dimensiones de la nave
    field int speed;         // Velocidad de movimiento
    field boolean active;    // Indica si la nave está activa
    field boolean attacking; // Indica si el enemigo está en modo ataque especial
    field int attackSpeed;   // Velocidad de ataque especial

    // Constructor
    constructor Enemy new(int Ax, int Ay) {
        let x = Ax;
        let y = Ay;
        let width = 16;      // Ancho aproximado basado en el dibujo
        let height = 16;     // Alto aproximado basado en el dibujo
        let speed = 8;       // Velocidad de movimiento
        let active = true;   // La nave está activa al crearse
        let attacking = false;
        let attackSpeed = 20;
        return this;
    }

    // Método para liberar memoria
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    // Método para mover la nave con un movimiento más preciso
    method void move(int hStep, int vStep) {
        // hStep: pasos horizontales (positivo = derecha, negativo = izquierda)
        // vStep: pasos verticales hacia abajo
        
        // Movimiento horizontal
        let x = x + hStep;
        
        // Movimiento vertical
        let y = y + vStep;
        
        // Limitar dentro de los bordes de la pantalla
        if (x < 0) {
            let x = 0;
        }
        if ((x + width) > 512) {
            let x = 512 - width;
        }
        
        // Si llega demasiado abajo en la pantalla - opcional
        if (y > 200) {
            // La lógica para cuando llegan al fondo está en SpaceGame
        }
        
        return;
    }

    // Método para dibujar la nave enemiga
    method void draw() {
        var int location;
        // Solo dibuja si está dentro de la pantalla
        if ((~(y < 0)) & (y < 256) & (~(x < 0)) & (x < 512)) {
            let location = (y * 32) + (x / 16);
            do Enemy.drawEnemy(location);
        }
        return;
    }
    
    // Método estático para dibujar el sprite de la nave enemiga
    function void drawEnemy(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        
        // column 0
        do Memory.poke(memAddress, -15421);
        do Memory.poke(memAddress + 32, -6169);
        do Memory.poke(memAddress + 64, -1);
        do Memory.poke(memAddress + 96, -1);
        do Memory.poke(memAddress + 128, -1);
        do Memory.poke(memAddress + 160, -1);
        do Memory.poke(memAddress + 192, 32766);
        do Memory.poke(memAddress + 224, 32766);
        do Memory.poke(memAddress + 256, 16380);
        do Memory.poke(memAddress + 288, 4080);
        do Memory.poke(memAddress + 320, 4080);
        do Memory.poke(memAddress + 352, 4080);
        do Memory.poke(memAddress + 384, 2016);
        do Memory.poke(memAddress + 416, 2016);
        do Memory.poke(memAddress + 448, 384);
        do Memory.poke(memAddress + 480, 384);
        
        return;
    }
    
    // Getters
    method int getX() { return x; }
    method int getY() { return y; }
    method int getWidth() { return width; }
    method int getHeight() { return height; }
    method boolean isActive() { return active; }
    
    // Setter para desactivar la nave
    method void setInactive() {
        let active = false;
        return;
    }
    
    // Setter para posición X
    method void setX(int newX) {
        let x = newX;
        return;
    }
    
    // Setter para posición Y
    method void setY(int newY) {
        let y = newY;
        return;
    }

    // Métodos para activar/desactivar ataque especial
    method void startAttack() {
        let attacking = true;
        return;
    }
    method void stopAttack() {
        let attacking = false;
        return;
    }
    method boolean isAttacking() {
        return attacking;
    }
    method void setAttackSpeed(int s) {
        let attackSpeed = s;
        return;
    }
    method int getAttackSpeed() {
        return attackSpeed;
    }
}