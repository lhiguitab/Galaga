// Archivo principal del juego
class SpaceGame {
    field Ship ship;             // La nave espacial del jugador
    field EnemyFleet enemies;    // La flota de naves enemigas
    field Array bullets;         // Array para almacenar los disparos activos
    field int bulletCount;       // Número actual de disparos
    field int maxBullets;        // Máximo número de disparos permitidos a la vez
    field int direction;         // Dirección actual del movimiento (-1: izquierda, 0: quieto, 1: derecha)
    field boolean exit;          // Flag para salir del juego
    field int enemyCount;        // Número de naves enemigas
    field int cooldown;          // Tiempo de espera entre disparos
    field int currentCooldown;   // Contador actual del tiempo de espera
    field Array enemyBullets;      // Array para balas enemigas
    field int maxEnemyBullets;     // Máximo de balas enemigas simultáneas
    field int enemyBulletCount;    // Número actual de balas enemigas
    field int enemyFireCooldown;   // Tiempo entre disparos enemigos
    field int currentEnemyCooldown;// Contador de cooldown enemigo
    field int lastShooter;

    // Constructor
    constructor SpaceGame new() {
        var int i;
        
        // Inicializa la nave en el centro de la pantalla
        let ship = Ship.new(256, 220);  // x=256 (centro), y=220 (cerca del fondo)
        let direction = 0;
        let exit = false;
        let enemyCount = 10;      // Horda de 10 naves enemigas en la parte superior
        
        // Inicializa la flota de naves enemigas estáticas en la parte superior
        let enemies = EnemyFleet.new(enemyCount);
        
        // Inicializa el sistema de disparos
        let maxBullets = 10;     // Máximo 10 balas simultáneas
        let bulletCount = 0;
        let bullets = Array.new(maxBullets);
        
        // Inicializa todas las posiciones del array a null
        let i = 0;
        while (i < maxBullets) {
            let bullets[i] = null;
            let i = i + 1;
        }
        
        // Inicializa balas enemigas
        let maxEnemyBullets = 10;
        let enemyBulletCount = 0;
        let enemyBullets = Array.new(maxEnemyBullets);
        let enemyFireCooldown = 20;
        let currentEnemyCooldown = 0;
        let i = 0;
        while (i < maxEnemyBullets) {
            let enemyBullets[i] = null;
            let i = i + 1;
        }
        let lastShooter = 0;
        
        // Configura el tiempo de espera entre disparos (cooldown)
        let cooldown = 10;       // 10 ciclos de juego entre disparos
        let currentCooldown = 0;
        
        return this;
    }

    // Método para liberar memoria
    method void dispose() {
        var int i;
        var Bullet bullet;
        
        do ship.dispose();
        do enemies.dispose();
        
        // Liberar la memoria de las balas
        let i = 0;
        while (i < maxBullets) {
            if (~(bullets[i] = null)) {
                let bullet = bullets[i];
                do bullet.dispose();
            }
            let i = i + 1;
        }
        
        do bullets.dispose();
        do Memory.deAlloc(this);
        return;
    }

    // Método para disparar una bala
    method void fireBullet() {
        var int i;
        var Bullet newBullet;
        var Bullet oldBullet;
        var Bullet currentBullet;
        var boolean isBulletActive;
        
        // Si el cooldown no ha terminado, no dispares
        if (currentCooldown > 0) {
            return;
        }
        
        // Busca una posición libre en el array de balas
        let i = 0;
        while (i < maxBullets) {
            if (bullets[i] = null) {
                // Si encontramos una posición vacía
                
                // Crea una nueva bala en la posición de la nave
                let newBullet = Bullet.new(ship.getX() + 8, ship.getY() - 5);  // Ajusta según el tamaño de la nave
                let bullets[i] = newBullet;
                
                // Reinicia el cooldown
                let currentCooldown = cooldown;
                
                return;
            } else {
                // Comprueba si la bala está inactiva
                let currentBullet = bullets[i];
                let isBulletActive = currentBullet.isActive();
                
                if (~isBulletActive) {
                    // Si hay una bala inactiva, libérala primero
                    do currentBullet.dispose();
                    
                    // Crea una nueva bala en la posición de la nave
                    let newBullet = Bullet.new(ship.getX() + 8, ship.getY() - 5);  // Ajusta según el tamaño de la nave
                    let bullets[i] = newBullet;
                    
                    // Reinicia el cooldown
                    let currentCooldown = cooldown;
                    
                    return;
                }
            }
            let i = i + 1;
        }
        
        return;
    }

    // Método para manejar la entrada del teclado
    method void handleInput() {
        var char key;
        let key = Keyboard.keyPressed();

        if (key = 130) {          // Flecha izquierda
            let direction = -1;
        }
        if (key = 132) {          // Flecha derecha
            let direction = 1;
        }
        if (key = 0) {            // No hay tecla presionada
            let direction = 0;
        }
        if (key = 81) {           // 'q' para salir
            let exit = true;
        }
        if (key = 32) {           // Espacio para disparar
            do fireBullet();
        }

        return;
    }

    // Método para actualizar el estado del juego
    method void update() {
        var int i;
        var Bullet bullet;
        var Enemy enemy;
        
        // Actualiza la posición de la nave según la dirección
        if (direction = -1) {
            do ship.moveLeft();
        }
        if (direction = 1) {
            do ship.moveRight();
        }
        
        // Actualiza las naves enemigas
        do enemies.update();
        
        // Colisión entre nave y enemigos
        let i = 0;
        while (i < enemyCount) {
            let enemy = enemies.getEnemy(i);
            if (enemy.isActive()) {
                // Detección de colisión simple (rectángulo)
                if ((ship.getX() < (enemy.getX() + enemy.getWidth())) &
                    ((ship.getX() + ship.getWidth()) > enemy.getX()) &
                    (ship.getY() < (enemy.getY() + enemy.getHeight())) &
                    ((ship.getY() + ship.getHeight()) > enemy.getY())) {
                    let exit = true;
                }
            }
            let i = i + 1;
        }
        
        // Disparo enemigo
        do enemyFire();
        
        // Comprueba si las naves enemigas han llegado demasiado abajo
        if (checkEnemiesReachedBottom()) {
            // Aquí podrías implementar "Game Over" o una penalización
            // Por ejemplo: let exit = true;
        }
        
        // Actualiza las balas y comprueba colisiones
        let i = 0;
        while (i < maxBullets) {
            if (~(bullets[i] = null)) {
                let bullet = bullets[i];
                if (bullet.isActive()) {
                    do bullet.update();
                    // Si la bala sale de la pantalla por arriba, libérala
                    if (bullet.getY() < 0) {
                        do bullet.dispose();
                        let bullets[i] = null;
                    } else {
                        // Comprueba colisiones con enemigos
                        do checkBulletCollisions(i);
                    }
                }
            }
            let i = i + 1;
        }
        
        // Actualiza balas enemigas
        do updateEnemyBullets();
        
        // Reduce el contador de cooldown
        if (currentCooldown > 0) {
            let currentCooldown = currentCooldown - 1;
        }
        
        // Reduce el cooldown de disparo enemigo
        if (currentEnemyCooldown > 0) {
            let currentEnemyCooldown = currentEnemyCooldown - 1;
        }

        return;
    }
    
    // Método para comprobar colisiones de una bala con los enemigos
    method void checkBulletCollisions(int bulletIndex) {
        var int i;
        var Bullet bullet;
        var Enemy enemy;
        var boolean collision;
        
        // Obtener la bala actual
        let bullet = bullets[bulletIndex];
        
        if (bullet.isActive()) {
            // Comprobar colisión con cada enemigo activo
            let i = 0;
            while (i < enemyCount) {
                let enemy = enemies.getEnemy(i);
                
                // Solo verificar colisión si el enemigo está activo
                if (enemy.isActive()) {
                    // Comprobar colisión entre la bala y este enemigo
                    let collision = bullet.checkCollision(
                        enemy.getX(), enemy.getY(), 16, 16
                    );
                    
                    if (collision) {
                        // Si hay colisión, desactivar tanto la bala como el enemigo
                        do bullet.deactivate();
                        do enemy.setInactive();
                        return; // Una bala solo puede impactar a un enemigo
                    }
                }
                
                let i = i + 1;
            }
        }
        return;
    }

    // Método para comprobar si alguna nave enemiga ha llegado demasiado abajo
    method boolean checkEnemiesReachedBottom() {
        var int i;
        var Enemy enemy;
        var boolean reachedBottom;
        
        let reachedBottom = false;
        
        let i = 0;
        while (i < enemyCount) {
            let enemy = enemies.getEnemy(i);
            if (enemy.isActive() & (enemy.getY() > 200)) {
                let reachedBottom = true;
            }
            let i = i + 1;
        }
        
        return reachedBottom;
    }

    // Método para dibujar la pantalla
    method void draw() {
        var int i;
        var Bullet bullet;
        
        // Limpia la pantalla
        do Screen.clearScreen();

        // Dibuja la nave del jugador
        do ship.draw();
        
        // Dibuja las naves enemigas
        do enemies.draw();
        
        // Dibuja las balas activas del jugador
        let i = 0;
        while (i < maxBullets) {
            if (~(bullets[i] = null)) {
                let bullet = bullets[i];
                if (bullet.isActive()) {
                    do bullet.draw();
                }
            }
            let i = i + 1;
        }
        
        // Dibuja las balas enemigas
        let i = 0;
        while (i < maxEnemyBullets) {
            if (~(enemyBullets[i] = null)) {
                let bullet = enemyBullets[i];
                if (bullet.isActive()) {
                    do bullet.draw();
                }
            }
            let i = i + 1;
        }

        // Espera para animación
        do Sys.wait(30);

        return;
    }

    // Método para que los enemigos disparen
    method void enemyFire() {
        var int i, shooter, j, nextShooter;
        var Enemy enemy;
        var Bullet newBullet;

        if (currentEnemyCooldown > 0) {
            return;
        }

        // Disparo secuencial: busca el siguiente enemigo activo en orden cíclico
        let shooter = lastShooter;
        let i = 0;
        while (i < enemyCount) {
            let enemy = enemies.getEnemy(shooter);
            if (enemy.isActive()) {
                let j = 0;
                while (j < maxEnemyBullets) {
                    if (enemyBullets[j] = null) {
                        let newBullet = Bullet.new(enemy.getX() + 8, enemy.getY() + 16);
                        let enemyBullets[j] = newBullet;
                        let currentEnemyCooldown = enemyFireCooldown;
                        let nextShooter = shooter + 1;
                        if (nextShooter < enemyCount) {
                            let lastShooter = nextShooter;
                        }
                        if (~(nextShooter < enemyCount)) {
                            let lastShooter = 0;
                        }
                        return;
                    }
                    let j = j + 1;
                }
                // Si no hay espacio para balas, igual avanza el turno
                let nextShooter = shooter + 1;
                if (nextShooter < enemyCount) {
                    let lastShooter = nextShooter;
                }
                if (~(nextShooter < enemyCount)) {
                    let lastShooter = 0;
                }
                return;
            }
            let shooter = shooter + 1;
            if (shooter = enemyCount) {
                let shooter = 0;
            }
            let i = i + 1;
        }
        return;
    }

    // Método para actualizar las balas enemigas
    method void updateEnemyBullets() {
        var int i, bulletY, bulletSpeed, newY;
        var Bullet bullet;

        let i = 0;
        while (i < maxEnemyBullets) {
            if (~(enemyBullets[i] = null)) {
                let bullet = enemyBullets[i];
                if (bullet.isActive()) {
                    // Mueve la bala hacia abajo
                    let bulletY = bullet.getY();
                    let bulletSpeed = 10;
                    let newY = bulletY + bulletSpeed;
                    if (newY > 256) {
                        do bullet.dispose();
                        let enemyBullets[i] = null;
                    } else {
                        do bullet.setY(newY);
                    }
                    // Colisión con la nave del jugador
                    if (bullet.checkCollision(ship.getX(), ship.getY(), ship.getWidth(), ship.getHeight())) {
                        let exit = true;
                    }
                }
            }
            let i = i + 1;
        }
        return;
    }

    // Método principal que ejecuta el juego
    method void run() {
        while (~exit) {
            do handleInput();
            do update();
            do draw();
            
            // Si todas las naves enemigas son destruidas, crea una nueva flota
            if (enemies.allDestroyed()) {
                do enemies.dispose();
                let enemies = EnemyFleet.new(enemyCount);
            }
        }

        return;
    }
}